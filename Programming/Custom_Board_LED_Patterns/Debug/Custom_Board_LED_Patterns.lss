
Custom_Board_LED_Patterns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d57  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c2  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000794  00000000  00000000  00001b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000022e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e7  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038e  00000000  00000000  000028fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002c89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  88:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#include "main.h"

BOOL button_was_pressed = FALSE;

ISR(INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	if((BUTTON_IS_PRESSED()) && (!button_was_pressed)) button_was_pressed = TRUE;
  9c:	4a 99       	sbic	0x09, 2	; 9
  9e:	07 c0       	rjmp	.+14     	; 0xae <__vector_1+0x1e>
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	81 11       	cpse	r24, r1
  a6:	03 c0       	rjmp	.+6      	; 0xae <__vector_1+0x1e>
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(!(BUTTON_IS_PRESSED()) && (button_was_pressed)) {
  ae:	4a 9b       	sbis	0x09, 2	; 9
  b0:	1e c0       	rjmp	.+60     	; 0xee <__vector_1+0x5e>
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b6:	88 23       	and	r24, r24
  b8:	d1 f0       	breq	.+52     	; 0xee <__vector_1+0x5e>
		if(state == STATE_1) state = STATE_2;
  ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  be:	81 11       	cpse	r24, r1
  c0:	04 c0       	rjmp	.+8      	; 0xca <__vector_1+0x3a>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  c8:	10 c0       	rjmp	.+32     	; 0xea <__vector_1+0x5a>
		else if(state == STATE_2) state = STATE_3;
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	21 f4       	brne	.+8      	; 0xd6 <__vector_1+0x46>
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  d4:	0a c0       	rjmp	.+20     	; 0xea <__vector_1+0x5a>
		else if(state == STATE_3) state = STATE_4;
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	21 f4       	brne	.+8      	; 0xe2 <__vector_1+0x52>
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
  e0:	04 c0       	rjmp	.+8      	; 0xea <__vector_1+0x5a>
		else if(state == STATE_4) state = STATE_1;
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	11 f4       	brne	.+4      	; 0xea <__vector_1+0x5a>
  e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
		button_was_pressed = FALSE;
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:

unsigned char state = STATE_1;

int main(void) {
	
	setup();
  fa:	0e 94 9b 01 	call	0x336	; 0x336 <setup>
	
	while (1)
	{

		if(state == STATE_1) all_leds_blink();
  fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 102:	81 11       	cpse	r24, r1
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x10>
 106:	0e 94 c5 00 	call	0x18a	; 0x18a <all_leds_blink>
		if(state == STATE_2) blink_left_to_right();
 10a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	11 f4       	brne	.+4      	; 0x116 <main+0x1c>
 112:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <blink_left_to_right>
		if(state == STATE_3) blink_right_to_left();
 116:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0x28>
 11e:	0e 94 1a 01 	call	0x234	; 0x234 <blink_right_to_left>
		if(state == STATE_4) blink_odd_vs_notOdd();
 122:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	11 f4       	brne	.+4      	; 0x12e <main+0x34>
 12a:	0e 94 44 01 	call	0x288	; 0x288 <blink_odd_vs_notOdd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e3       	ldi	r24, 0x3F	; 63
 130:	9f e1       	ldi	r25, 0x1F	; 31
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x38>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x3e>
 138:	00 00       	nop
 13a:	e1 cf       	rjmp	.-62     	; 0xfe <main+0x4>

0000013c <prepare_leds_shift_format>:
uint8_t shift_format_for_leds = 0x00;

/**************************************************************************/
void prepare_leds_shift_format() {
	shift_format_for_leds = 0x00;
	shift_format_for_leds |= (1 << LED_BLUE_BIT);
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
 142:	08 95       	ret

00000144 <shift_next_led>:
}

void shift_next_led() {
	shift_format_for_leds <<=1;
 144:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shift_format_for_leds>
 148:	88 0f       	add	r24, r24
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
	LED_PORT |= shift_format_for_leds;
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	89 2b       	or	r24, r25
 152:	85 b9       	out	0x05, r24	; 5
 154:	08 95       	ret

00000156 <shift_prev_led>:
}

void shift_prev_led()  {
	shift_format_for_leds >>=1;
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shift_format_for_leds>
 15a:	86 95       	lsr	r24
 15c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
	LED_PORT |= shift_format_for_leds;
 160:	95 b1       	in	r25, 0x05	; 5
 162:	89 2b       	or	r24, r25
 164:	85 b9       	out	0x05, r24	; 5
 166:	08 95       	ret

00000168 <go_to_the_end_shift_format>:
}

void go_to_the_end_shift_format() {
	prepare_leds_shift_format();
 168:	0e 94 9e 00 	call	0x13c	; 0x13c <prepare_leds_shift_format>
	shift_format_for_leds <<= 4;
 16c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shift_format_for_leds>
 170:	82 95       	swap	r24
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
 178:	08 95       	ret

0000017a <go_to_the_start_shift_format>:
}

void go_to_the_start_shift_format() {
	prepare_leds_shift_format();
 17a:	0e 94 9e 00 	call	0x13c	; 0x13c <prepare_leds_shift_format>
	shift_format_for_leds >>=1;
 17e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <shift_format_for_leds>
 182:	86 95       	lsr	r24
 184:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
 188:	08 95       	ret

0000018a <all_leds_blink>:
}
/**************************************************************************/
void all_leds_blink()
{
	LED_ALL_TURN_ON();
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	85 b9       	out	0x05, r24	; 5
 190:	85 b1       	in	r24, 0x05	; 5
 192:	80 61       	ori	r24, 0x10	; 16
 194:	85 b9       	out	0x05, r24	; 5
 196:	85 b1       	in	r24, 0x05	; 5
 198:	88 60       	ori	r24, 0x08	; 8
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	83 ec       	ldi	r24, 0xC3	; 195
 1a6:	99 e0       	ldi	r25, 0x09	; 9
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <all_leds_blink+0x1e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <all_leds_blink+0x28>
 1b2:	00 00       	nop
	_delay_ms(200);
	LED_ALL_TURN_OFF();
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	85 b9       	out	0x05, r24	; 5
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	87 7f       	andi	r24, 0xF7	; 247
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	83 ec       	ldi	r24, 0xC3	; 195
 1d0:	99 e0       	ldi	r25, 0x09	; 9
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <all_leds_blink+0x48>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <all_leds_blink+0x52>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <blink_left_to_right>:
	_delay_ms(200);
}
/**************************************************************************/
void blink_left_to_right()
{
 1e0:	cf 93       	push	r28
	go_to_the_end_shift_format();
 1e2:	0e 94 b4 00 	call	0x168	; 0x168 <go_to_the_end_shift_format>
	for(uint8_t i = 0; i < 4;i++) {
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <blink_left_to_right+0x22>
		shift_prev_led(); _delay_ms(200);
 1ea:	0e 94 ab 00 	call	0x156	; 0x156 <shift_prev_led>
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	83 ec       	ldi	r24, 0xC3	; 195
 1f2:	99 e0       	ldi	r25, 0x09	; 9
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <blink_left_to_right+0x14>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <blink_left_to_right+0x1e>
 1fe:	00 00       	nop
}
/**************************************************************************/
void blink_left_to_right()
{
	go_to_the_end_shift_format();
	for(uint8_t i = 0; i < 4;i++) {
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	c4 30       	cpi	r28, 0x04	; 4
 204:	90 f3       	brcs	.-28     	; 0x1ea <blink_left_to_right+0xa>
		shift_prev_led(); _delay_ms(200);
	}
	LED_ALL_TURN_OFF();
 206:	85 b1       	in	r24, 0x05	; 5
 208:	8f 7d       	andi	r24, 0xDF	; 223
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	8f 7e       	andi	r24, 0xEF	; 239
 210:	85 b9       	out	0x05, r24	; 5
 212:	85 b1       	in	r24, 0x05	; 5
 214:	87 7f       	andi	r24, 0xF7	; 247
 216:	85 b9       	out	0x05, r24	; 5
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ec       	ldi	r24, 0xC3	; 195
 222:	99 e0       	ldi	r25, 0x09	; 9
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <blink_left_to_right+0x44>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <blink_left_to_right+0x4e>
 22e:	00 00       	nop
	_delay_ms(200);
}
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <blink_right_to_left>:
/**************************************************************************/
void blink_right_to_left()
{
 234:	cf 93       	push	r28
	go_to_the_start_shift_format();
 236:	0e 94 bd 00 	call	0x17a	; 0x17a <go_to_the_start_shift_format>
	for(uint8_t i = 0; i < 4;i++) {
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	0c c0       	rjmp	.+24     	; 0x256 <blink_right_to_left+0x22>
		shift_next_led(); _delay_ms(200);
 23e:	0e 94 a2 00 	call	0x144	; 0x144 <shift_next_led>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	83 ec       	ldi	r24, 0xC3	; 195
 246:	99 e0       	ldi	r25, 0x09	; 9
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <blink_right_to_left+0x14>
 250:	00 c0       	rjmp	.+0      	; 0x252 <blink_right_to_left+0x1e>
 252:	00 00       	nop
}
/**************************************************************************/
void blink_right_to_left()
{
	go_to_the_start_shift_format();
	for(uint8_t i = 0; i < 4;i++) {
 254:	cf 5f       	subi	r28, 0xFF	; 255
 256:	c4 30       	cpi	r28, 0x04	; 4
 258:	90 f3       	brcs	.-28     	; 0x23e <blink_right_to_left+0xa>
		shift_next_led(); _delay_ms(200);
	}
	LED_ALL_TURN_OFF();
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	8f 7d       	andi	r24, 0xDF	; 223
 25e:	85 b9       	out	0x05, r24	; 5
 260:	85 b1       	in	r24, 0x05	; 5
 262:	8f 7e       	andi	r24, 0xEF	; 239
 264:	85 b9       	out	0x05, r24	; 5
 266:	85 b1       	in	r24, 0x05	; 5
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	85 b9       	out	0x05, r24	; 5
 26c:	85 b1       	in	r24, 0x05	; 5
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	85 b9       	out	0x05, r24	; 5
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ec       	ldi	r24, 0xC3	; 195
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <blink_right_to_left+0x44>
 280:	00 c0       	rjmp	.+0      	; 0x282 <blink_right_to_left+0x4e>
 282:	00 00       	nop
	_delay_ms(200);
}
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <blink_odd_vs_notOdd>:
/**************************************************************************/
void blink_odd_vs_notOdd()
{
	LED_ALL_TURN_OFF();
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8f 7d       	andi	r24, 0xDF	; 223
 28c:	85 b9       	out	0x05, r24	; 5
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	8f 7e       	andi	r24, 0xEF	; 239
 292:	85 b9       	out	0x05, r24	; 5
 294:	85 b1       	in	r24, 0x05	; 5
 296:	87 7f       	andi	r24, 0xF7	; 247
 298:	85 b9       	out	0x05, r24	; 5
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	85 b9       	out	0x05, r24	; 5
	shift_format_for_leds = 0x00;
	shift_format_for_leds |= (1 << LED_GREEN_BIT) | (1 << LED_YELLOW_BIT);
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
	LED_PORT |= shift_format_for_leds; _delay_ms(200);
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	88 62       	ori	r24, 0x28	; 40
 2aa:	85 b9       	out	0x05, r24	; 5
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	83 ec       	ldi	r24, 0xC3	; 195
 2b0:	99 e0       	ldi	r25, 0x09	; 9
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <blink_odd_vs_notOdd+0x2a>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <blink_odd_vs_notOdd+0x34>
 2bc:	00 00       	nop
	LED_ALL_TURN_OFF(); _delay_ms(200);
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8f 7d       	andi	r24, 0xDF	; 223
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	8f 7e       	andi	r24, 0xEF	; 239
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	85 b1       	in	r24, 0x05	; 5
 2cc:	87 7f       	andi	r24, 0xF7	; 247
 2ce:	85 b9       	out	0x05, r24	; 5
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	8b 7f       	andi	r24, 0xFB	; 251
 2d4:	85 b9       	out	0x05, r24	; 5
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	83 ec       	ldi	r24, 0xC3	; 195
 2da:	99 e0       	ldi	r25, 0x09	; 9
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <blink_odd_vs_notOdd+0x54>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <blink_odd_vs_notOdd+0x5e>
 2e6:	00 00       	nop
	
	shift_format_for_leds = 0x00;
	shift_format_for_leds |= (1 << LED_RED_BIT) | (1 << LED_BLUE_BIT);
 2e8:	84 e1       	ldi	r24, 0x14	; 20
 2ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <shift_format_for_leds>
	LED_PORT |= shift_format_for_leds; _delay_ms(200);
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	84 61       	ori	r24, 0x14	; 20
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	83 ec       	ldi	r24, 0xC3	; 195
 2f8:	99 e0       	ldi	r25, 0x09	; 9
 2fa:	21 50       	subi	r18, 0x01	; 1
 2fc:	80 40       	sbci	r24, 0x00	; 0
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <blink_odd_vs_notOdd+0x72>
 302:	00 c0       	rjmp	.+0      	; 0x304 <blink_odd_vs_notOdd+0x7c>
 304:	00 00       	nop
	LED_ALL_TURN_OFF(); _delay_ms(200);
 306:	85 b1       	in	r24, 0x05	; 5
 308:	8f 7d       	andi	r24, 0xDF	; 223
 30a:	85 b9       	out	0x05, r24	; 5
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	8f 7e       	andi	r24, 0xEF	; 239
 310:	85 b9       	out	0x05, r24	; 5
 312:	85 b1       	in	r24, 0x05	; 5
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	85 b9       	out	0x05, r24	; 5
 318:	85 b1       	in	r24, 0x05	; 5
 31a:	8b 7f       	andi	r24, 0xFB	; 251
 31c:	85 b9       	out	0x05, r24	; 5
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	83 ec       	ldi	r24, 0xC3	; 195
 322:	99 e0       	ldi	r25, 0x09	; 9
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <blink_odd_vs_notOdd+0x9c>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <blink_odd_vs_notOdd+0xa6>
 32e:	00 00       	nop
	prepare_leds_shift_format();
 330:	0e 94 9e 00 	call	0x13c	; 0x13c <prepare_leds_shift_format>
 334:	08 95       	ret

00000336 <setup>:
#include "leds.h"
#include <avr/interrupt.h>
#include "main_helper.h"

void setup() {
	SETUP_BUTTON();
 336:	8a b1       	in	r24, 0x0a	; 10
 338:	8b 7f       	andi	r24, 0xFB	; 251
 33a:	8a b9       	out	0x0a, r24	; 10
 33c:	8b b1       	in	r24, 0x0b	; 11
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	8b b9       	out	0x0b, r24	; 11
	SETUP_LEDS();
 342:	84 b1       	in	r24, 0x04	; 4
 344:	80 62       	ori	r24, 0x20	; 32
 346:	84 b9       	out	0x04, r24	; 4
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	8f 7d       	andi	r24, 0xDF	; 223
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	84 b1       	in	r24, 0x04	; 4
 350:	80 61       	ori	r24, 0x10	; 16
 352:	84 b9       	out	0x04, r24	; 4
 354:	85 b1       	in	r24, 0x05	; 5
 356:	8f 7e       	andi	r24, 0xEF	; 239
 358:	85 b9       	out	0x05, r24	; 5
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	88 60       	ori	r24, 0x08	; 8
 35e:	84 b9       	out	0x04, r24	; 4
 360:	85 b1       	in	r24, 0x05	; 5
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	85 b9       	out	0x05, r24	; 5
 366:	84 b1       	in	r24, 0x04	; 4
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	84 b9       	out	0x04, r24	; 4
 36c:	85 b1       	in	r24, 0x05	; 5
 36e:	8b 7f       	andi	r24, 0xFB	; 251
 370:	85 b9       	out	0x05, r24	; 5
	
	EICRA |= (1 << ISC00) ; // ANYLOGIC edge for INT0
 372:	e9 e6       	ldi	r30, 0x69	; 105
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	80 83       	st	Z, r24
	EIMSK  |= (1 << INT0 ) ;
 37c:	8d b3       	in	r24, 0x1d	; 29
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	8d bb       	out	0x1d, r24	; 29
	sei();
 382:	78 94       	sei
	
	prepare_leds_shift_format();
 384:	0e 94 9e 00 	call	0x13c	; 0x13c <prepare_leds_shift_format>
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
